name: Package and Release

on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:

permissions:
  contents: write

env:
  BINARY_NAME: Sanchaar
  CARGO_TERM_COLOR: always

jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get current branch
        id: check_step
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "Branch is $branch."
          if [ "$branch" != "main" ]; then
            echo "Error: Branch is not main"
            exit 1
          fi
          echo "✓ Branch is main"

  build-linux:
    name: Build Linux (${{ matrix.target }})
    runs-on: ubuntu-22.04
    needs: check-branch
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Override version in Cargo.toml
        shell: bash
        run: |
          echo "Replacing version placeholder with ${{ env.VERSION }}"
          sed -i 's/0.1.0-prerelease.1/${{ env.VERSION }}/g' Cargo.toml
          echo "Updated version to ${{ env.VERSION }}"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu perl make

      - name: Install system dependencies (x86_64)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            pkg-config

      - uses: Swatinem/rust-cache@v2
        with:
          key: linux-${{ matrix.target }}

      - name: Install cargo-packager
        run: cargo install cargo-packager --locked

      - name: Build packages with cargo-packager (x86_64)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          # Explicitly unset any cross-compilation variables
          unset CC CXX CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER 2>/dev/null || true
          cargo packager --release --target ${{ matrix.target }} --formats deb,appimage,pacman

      - name: Build packages with cargo-packager (ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          # Set cross-compilation environment variables
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export PKG_CONFIG_ALLOW_CROSS=1
          cargo packager --release --target ${{ matrix.target }} --formats deb,appimage,pacman

      - name: Generate checksums
        run: |
          cd target/${{ matrix.target }}/release/bundle
          find . -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.tar.gz" \) -exec sh -c 'sha256sum "{}" > "{}.sha256"' \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/bundle/**/*.deb
            target/${{ matrix.target }}/release/bundle/**/*.AppImage
            target/${{ matrix.target }}/release/bundle/**/*.tar.gz
            target/${{ matrix.target }}/release/bundle/**/PKGBUILD
            target/${{ matrix.target }}/release/bundle/**/*.sha256

  build-macos:
    name: Build macOS (${{ matrix.target }})
    runs-on: macos-latest
    needs: check-branch
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            arch: Intel
          - target: aarch64-apple-darwin
            arch: AppleSilicon

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Override version in Cargo.toml
        shell: bash
        run: |
          echo "Replacing version placeholder with ${{ env.VERSION }}"
          sed -i '' 's/0.1.0-prerelease.1/${{ env.VERSION }}/g' Cargo.toml
          echo "Updated version to ${{ env.VERSION }}"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: macos-${{ matrix.target }}

      - name: Install cargo-packager
        run: cargo install cargo-packager --locked

      - name: Build packages with cargo-packager
        run: |
          cargo packager --release --target ${{ matrix.target }} --formats dmg

      - name: Generate checksums
        run: |
          cd target/${{ matrix.target }}/release/bundle
          find . -type f -name "*.dmg" -exec sh -c 'shasum -a 256 "{}" > "{}.sha256"' \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/bundle/**/*.dmg
            target/${{ matrix.target }}/release/bundle/**/*.sha256

  release:
    name: Create Release
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: |
          mkdir release
          find artifacts -type f -exec cp {} release/ \;
          ls -lah release/

      - name: Update Homebrew Cask
        run: |
          # Find the DMG files dynamically
          INTEL_DMG_SHA256_FILE=$(find release -name "*x86_64*.dmg.sha256" -o -name "*x64*.dmg.sha256" | head -1)
          ARM_DMG_SHA256_FILE=$(find release -name "*aarch64*.dmg.sha256" -o -name "*arm64*.dmg.sha256" | head -1)

          if [ -z "$INTEL_DMG_SHA256_FILE" ] || [ -z "$ARM_DMG_SHA256_FILE" ]; then
            echo "Error: Could not find DMG checksum files"
            echo "Intel file: $INTEL_DMG_SHA256_FILE"
            echo "ARM file: $ARM_DMG_SHA256_FILE"
            ls -la release/
            exit 1
          fi

          # Extract checksums from the sha256 files
          INTEL_SHA256=$(cat "$INTEL_DMG_SHA256_FILE" | awk '{print $1}')
          ARM_SHA256=$(cat "$ARM_DMG_SHA256_FILE" | awk '{print $1}')

          echo "Intel SHA256: $INTEL_SHA256"
          echo "ARM SHA256: $ARM_SHA256"

          # Copy the template
          cp homebrew/sanchaar.rb homebrew/sanchaar-updated.rb

          # Update version
          sed -i "s/version \".*\"/version \"${{ env.VERSION }}\"/" homebrew/sanchaar-updated.rb

          # Replace SHA256 placeholders with actual checksums
          sed -i "s/REPLACE_WITH_X86_64_SHA256/$INTEL_SHA256/" homebrew/sanchaar-updated.rb
          sed -i "s/REPLACE_WITH_ARM64_SHA256/$ARM_SHA256/" homebrew/sanchaar-updated.rb

          echo "Updated Homebrew cask:"
          cat homebrew/sanchaar-updated.rb

      - name: Publish to Homebrew Tap
        env:
          TAP_GITHUB_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
        run: |
          # Clone the tap repository
          git clone https://x-access-token:${{ secrets.TAP_GITHUB_TOKEN }}@github.com/nrjais/homebrew-tap.git tap-repo
          cd tap-repo

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create Casks directory if it doesn't exist
          mkdir -p Casks

          # Create a new branch for the PR
          BRANCH_NAME="update-sanchaar-${{ env.VERSION }}"
          git checkout -b "$BRANCH_NAME"

          # Copy the updated formula (with checksums)
          cp ../homebrew/sanchaar-updated.rb Casks/sanchaar.rb

          # Commit and push if there are changes
          git add Casks/sanchaar.rb
          if git diff --staged --quiet; then
            echo "No changes to publish"
          else
            git commit -m "Update sanchaar to version ${{ env.VERSION }}"
            git push https://x-access-token:${{ secrets.TAP_GITHUB_TOKEN }}@github.com/nrjais/homebrew-tap.git "$BRANCH_NAME"
            echo "✓ Pushed branch $BRANCH_NAME to homebrew-tap"
          fi

          cd ..

      - name: Create Pull Request in Homebrew Tap
        env:
          GH_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="update-sanchaar-${{ env.VERSION }}"

          # Check if PR already exists
          EXISTING_PR=$(gh pr list --repo nrjais/homebrew-tap --head "$BRANCH_NAME" --json number --jq '.[0].number')

          if [ -n "$EXISTING_PR" ]; then
            echo "PR already exists: #$EXISTING_PR"
          else
            # Get checksums for PR description (find files dynamically)
            INTEL_DMG_SHA256_FILE=$(find ../release -name "*x86_64*.dmg.sha256" -o -name "*x64*.dmg.sha256" | head -1)
            ARM_DMG_SHA256_FILE=$(find ../release -name "*aarch64*.dmg.sha256" -o -name "*arm64*.dmg.sha256" | head -1)

            INTEL_SHA_SHORT=$(cat "$INTEL_DMG_SHA256_FILE" | awk '{print $1}' | cut -c1-16)
            ARM_SHA_SHORT=$(cat "$ARM_DMG_SHA256_FILE" | awk '{print $1}' | cut -c1-16)

            # Create PR body
            PR_BODY="This PR updates the sanchaar cask to version \`${{ env.VERSION }}\`.

          ## Changes
          - Updated version to \`${{ env.VERSION }}\`
          - Updated download URLs for the new release
          - Updated SHA256 checksums:
            - Intel (x86_64): \`${INTEL_SHA_SHORT}...\`
            - ARM (aarch64): \`${ARM_SHA_SHORT}...\`

          ## Release Notes
          See the [release notes](https://github.com/nrjais/sanchaar/releases/tag/${{ env.VERSION }}) for details.

          ---
          *This PR was automatically created by the release workflow.*"

            # Create PR in the tap repository
            gh pr create \
              --repo nrjais/homebrew-tap \
              --head "$BRANCH_NAME" \
              --title "Update sanchaar to version ${{ env.VERSION }}" \
              --body "$PR_BODY" \
              --base main

            echo "✓ Created PR for sanchaar@${{ env.VERSION }} in homebrew-tap"
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: ${{ contains(env.VERSION, 'rc') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'alpha') || contains(env.VERSION, 'prerelease') }}
          generate_release_notes: true
          files: release/*
