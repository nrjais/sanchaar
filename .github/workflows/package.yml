name: Package and Release

on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:

permissions:
  contents: write

env:
  BINARY_NAME: Sanchaar
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    name: Build Linux (${{ matrix.target }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install system dependencies
        run: |
          sudo apt-get install -y \
            libssl-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            pkg-config

      - uses: Swatinem/rust-cache@v2
        with:
          key: linux-${{ matrix.target }}

      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
            export PKG_CONFIG_ALLOW_CROSS=1
            export OPENSSL_DIR=/usr
            export OPENSSL_INCLUDE_DIR=/usr/include
            export OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu
          fi
          cargo build --release --target ${{ matrix.target }} --no-default-features

      - name: Install cargo-deb
        if: matrix.arch == 'amd64'
        run: cargo install cargo-deb

      - name: Create .deb package
        if: matrix.arch == 'amd64'
        run: |
          cargo deb --target ${{ matrix.target }} --no-build --no-strip --no-default-features
          cp target/${{ matrix.target }}/debian/*.deb ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.arch }}.deb

      - name: Generate checksums
        run: |
          if [ -f "${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.arch }}.deb" ]; then
            sha256sum ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.arch }}.deb > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.arch }}.deb.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: |
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.arch }}.*

  build-macos:
    name: Build macOS (${{ matrix.target }})
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            arch: Intel
          - target: aarch64-apple-darwin
            arch: AppleSilicon

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: macos-${{ matrix.target }}

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Build bundle
        run: cargo bundle --release --target ${{ matrix.target }} --no-default-features

      - name: Ad-hoc code sign
        run: |
          codesign --force --deep --sign - target/${{ matrix.target }}/release/bundle/osx/${{ env.BINARY_NAME }}.app

      - name: Remove quarantine attribute
        run: |
          # Remove quarantine attribute to prevent Gatekeeper warnings
          xattr -cr target/${{ matrix.target }}/release/bundle/osx/${{ env.BINARY_NAME }}.app
          echo "✓ Quarantine attribute removed from app bundle"

      - name: Create fancy DMG
        run: |
          # Create DMG with custom layout and styling
          create-dmg \
            --volname "${{ env.BINARY_NAME }}" \
            --background "assets/dmg-background.png" \
            --window-pos 200 120 \
            --window-size 660 450 \
            --icon-size 120 \
            --icon "${{ env.BINARY_NAME }}.app" 180 170 \
            --hide-extension "${{ env.BINARY_NAME }}.app" \
            --app-drop-link 480 170 \
            --no-internet-enable \
            --hdiutil-quiet \
            "${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.target }}.dmg" \
            "target/${{ matrix.target }}/release/bundle/osx/${{ env.BINARY_NAME }}.app"

      - name: Generate checksums
        run: |
          shasum -a 256 ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.target }}.dmg > ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.target }}.dmg.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: |
            ${{ env.BINARY_NAME }}-${{ env.VERSION }}-${{ matrix.target }}.*
            ${{ env.BINARY_NAME }}-remove-quarantine.sh

  release:
    name: Create Release
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: |
          mkdir release
          find artifacts -type f -exec cp {} release/ \;
          ls -lah release/

      - name: Update Homebrew Cask
        run: |
          # Extract checksums from the sha256 files
          INTEL_SHA256=$(cat release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-x86_64-apple-darwin.dmg.sha256 | awk '{print $1}')
          ARM_SHA256=$(cat release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-aarch64-apple-darwin.dmg.sha256 | awk '{print $1}')

          echo "Intel SHA256: $INTEL_SHA256"
          echo "ARM SHA256: $ARM_SHA256"

          # Copy the template
          cp homebrew/sanchaar.rb homebrew/sanchaar-updated.rb

          # Update version
          sed -i "s/version \".*\"/version \"${{ env.VERSION }}\"/" homebrew/sanchaar-updated.rb

          # Replace SHA256 placeholders with actual checksums
          sed -i "s/REPLACE_WITH_X86_64_SHA256/$INTEL_SHA256/" homebrew/sanchaar-updated.rb
          sed -i "s/REPLACE_WITH_ARM64_SHA256/$ARM_SHA256/" homebrew/sanchaar-updated.rb

          echo "Updated Homebrew cask:"
          cat homebrew/sanchaar-updated.rb

          # Copy to release directory
          cp homebrew/sanchaar-updated.rb release/sanchaar.rb

      - name: Publish to Homebrew Tap
        env:
          TAP_GITHUB_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
        run: |
          # Clone the tap repository
          git clone https://x-access-token:${{ secrets.TAP_GITHUB_TOKEN }}@github.com/nrjais/homebrew-tap.git tap-repo
          cd tap-repo

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create Casks directory if it doesn't exist
          mkdir -p Casks

          # Create a new branch for the PR
          BRANCH_NAME="update-sanchaar-${{ env.VERSION }}"
          git checkout -b "$BRANCH_NAME"

          # Copy the updated formula (with checksums)
          cp ../homebrew/sanchaar-updated.rb Casks/sanchaar.rb

          # Commit and push if there are changes
          git add Casks/sanchaar.rb
          if git diff --staged --quiet; then
            echo "No changes to publish"
          else
            git commit -m "Update sanchaar to version ${{ env.VERSION }}"
            git push https://x-access-token:${{ secrets.TAP_GITHUB_TOKEN }}@github.com/nrjais/homebrew-tap.git "$BRANCH_NAME"
            echo "✓ Pushed branch $BRANCH_NAME to homebrew-tap"
          fi

          cd ..

      - name: Create Pull Request in Homebrew Tap
        env:
          GH_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="update-sanchaar-${{ env.VERSION }}"

          # Check if PR already exists
          EXISTING_PR=$(gh pr list --repo nrjais/homebrew-tap --head "$BRANCH_NAME" --json number --jq '.[0].number')

          if [ -n "$EXISTING_PR" ]; then
            echo "PR already exists: #$EXISTING_PR"
          else
            # Get checksums for PR description
            INTEL_SHA_SHORT=$(cat ../release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-x86_64-apple-darwin.dmg.sha256 | awk '{print $1}' | cut -c1-16)
            ARM_SHA_SHORT=$(cat ../release/${{ env.BINARY_NAME }}-${{ env.VERSION }}-aarch64-apple-darwin.dmg.sha256 | awk '{print $1}' | cut -c1-16)

            # Create PR body
            PR_BODY="This PR updates the sanchaar cask to version \`${{ env.VERSION }}\`.

          ## Changes
          - Updated version to \`${{ env.VERSION }}\`
          - Updated download URLs for the new release
          - Updated SHA256 checksums:
            - Intel (x86_64): \`${INTEL_SHA_SHORT}...\`
            - ARM (aarch64): \`${ARM_SHA_SHORT}...\`

          ## Release Notes
          See the [release notes](https://github.com/nrjais/sanchaar/releases/tag/${{ env.VERSION }}) for details.

          ---
          *This PR was automatically created by the release workflow.*"

            # Create PR in the tap repository
            gh pr create \
              --repo nrjais/homebrew-tap \
              --head "$BRANCH_NAME" \
              --title "Update sanchaar to version ${{ env.VERSION }}" \
              --body "$PR_BODY" \
              --base main

            echo "✓ Created PR for sanchaar@${{ env.VERSION }} in homebrew-tap"
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: ${{ contains(env.VERSION, 'rc') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'alpha') || contains(env.VERSION, 'prerelease') }}
          generate_release_notes: true
          files: release/*
